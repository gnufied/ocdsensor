// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/home.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\x36\x10\xfe\xde\x5f\x71\x50\x30\xd8\xc6\x1c\xd9\x4e\xba\xa0\x53\xa4\x00\x4d\x6c\x63\x1d\x9a\x26\xe8\x0b\xf6\x21\x08\x0a\x5a\xa4\x63\xae\x14\xa9\x92\x94\x2d\x2f\xf0\x7f\x1f\x28\xeb\x85\x92\x5f\xa2\x60\x4b\x10\x58\xbe\x3b\x3e\x7c\xee\xe1\x1d\x49\xc5\x5f\xe8\x88\x5d\xbd\x01\xf0\x17\x04\x61\xf3\x00\xe0\x47\x44\x23\x08\x17\x48\x2a\xa2\x03\x27\xd1\xf3\xd3\x77\x4e\xee\x52\xa1\xa4\xb1\x06\x25\xc3\xc0\x59\x68\x1d\x2b\x6f\x30\x08\x31\x77\x63\x26\xb4\xcb\xd6\x03\xf3\xc9\xd6\xa7\x0c\x69\xa2\xb4\x1b\x51\xee\xfe\xad\x9c\x2b\x7f\xb0\x1d\x57\x80\xe8\x35\x23\xdb\x67\x70\xff\x49\xe8\xa9\x46\x33\x46\xe0\x79\x6b\x01\x58\x51\xac\x17\x1e\x8c\x86\xc3\x5f\x2e\x0b\xdb\x4c\x48\x4c\xa4\x07\x4a\x30\x8a\x61\x14\xa7\x70\x32\x1e\x4f\x26\x93\x49\x23\xe2\x34\x14\x8c\xa1\x58\x11\x0f\x8a\xa7\x66\x84\x8a\x51\x48\xf9\x93\x07\xc3\xd2\x33\x17\x5c\x7b\xc0\x85\x8c\x10\x83\xd1\x79\x9c\xc2\x7b\x49\x11\xeb\x83\x42\x5c\x9d\x2a\x22\xe9\x3c\x8f\xdd\xec\xd0\x76\xc9\x92\xf0\x8a\xfc\x0c\x85\x3f\x9e\xa4\x48\x38\x36\x54\x84\xf4\xe0\xe4\xe6\xc2\xfc\x1e\x06\x10\x18\x1f\x1d\x3f\xcd\x7e\x0e\x8e\xd7\x66\xe9\x40\x2f\x8e\x62\x8c\xc7\x93\xe9\x64\xfa\x0a\x39\x8b\x81\xe7\xe7\x17\xd7\x17\xd7\xa5\x39\x46\x18\x67\xe2\x8d\x86\x71\x5a\x5a\x35\x49\xf5\x29\x62\xf4\x89\x7b\xc0\xc8\x5c\xd7\x1d\x6a\x81\xb0\x58\x79\xd9\x34\xc5\xdf\xc9\x7c\x7e\x58\x52\x3d\x13\x78\x0d\xda\x56\xe5\x15\x7c\xcf\xdb\x90\x6d\xc5\xc9\x1f\x58\xa5\xea\xdb\x35\x0c\x4b\x24\x21\x4c\xa4\x24\x5c\x7f\x25\x51\x7c\xb9\x63\x9d\x4a\xf2\x73\xd7\x7a\x4b\x10\xdf\xc6\xbf\xc9\x4b\x9d\x63\xb1\x72\x05\x67\x02\x61\x08\x60\x9e\xf0\x50\x53\xc1\xbb\xbd\x2a\x77\x33\x5c\xd3\x88\x40\x00\x9c\xac\x60\x8c\x34\xe9\xf6\x0a\x80\x1c\x3d\x4e\x0c\x2a\x04\xd5\x28\x80\xd4\x83\x87\xc7\x7e\xf5\x7d\xdd\xf8\x1e\x09\x4c\x3c\xe8\x30\xca\x89\xea\x58\x76\x8e\x22\xe2\x81\x73\x73\xff\x0d\x0c\xa8\x63\xb9\x4c\xac\x67\xcf\x51\xea\xde\x39\x79\x37\xbc\x79\x3f\xbd\xb0\x81\x00\xd4\x02\xc5\x66\x0e\x15\x9b\x91\x9d\xca\xb5\x79\x53\x3e\xd8\x79\x44\xe8\xe6\xfe\xdb\xff\x9e\x89\x11\x1d\x5e\x9b\xce\xd9\xf5\xef\x6f\x47\xe3\x7a\x3a\x18\xa9\x85\x07\x1d\x2c\xb4\x6d\x3f\x90\x4b\x18\x27\xa6\x06\x5e\x97\x49\x8a\x52\xaa\x3c\xe8\xa4\x67\xf6\x0c\xeb\xdc\xba\xae\x59\x5b\xac\xdf\x54\x92\x84\xf0\x70\xbd\x27\xe9\x32\xd1\xf1\xf4\xb7\x8b\xe9\xa8\x53\x65\x51\x2f\x2d\x86\xd6\x22\xd1\x8d\x2c\xb6\x7c\x6a\xc2\xe9\x75\xb6\xd2\x18\x69\xd2\x10\x4d\x44\x88\x72\x0f\x1e\x86\x7d\x18\x3d\x36\xca\x43\xac\x34\x0d\x7f\x30\x34\x23\x4c\x79\x30\x47\x4c\x11\x4b\xd8\x5d\x09\x9e\x2b\x34\xf7\xa2\x3f\x7a\xdc\x34\xb5\x3b\x6b\x4b\x0b\xf1\x70\x91\x09\x50\x17\xb5\xc9\xf7\x08\x9b\xe6\x54\x25\x62\x7a\x04\x71\xe8\xbe\xb5\x48\xd7\x2b\x06\x23\x8d\x20\x80\x87\xbc\x9b\xfb\x55\x3b\xf4\xf3\x62\x7a\xac\xd6\xe6\x3e\x3b\x69\xb3\x83\xb7\xdb\x79\x92\x28\x5e\x74\xfa\x19\x42\x3f\x5f\xb2\xe6\x16\xc1\xcd\x22\x0e\xeb\x46\xca\x35\x91\x4b\xc4\x20\x00\x45\xf4\x87\xfc\x5b\xb7\xb6\x0b\x55\x99\xbc\xb0\x11\x6d\x03\x92\xd8\x68\x5d\xaf\x97\x6d\xdd\x3f\x98\xb1\x8f\x7d\xa8\x7f\xd6\x2b\xc2\xf4\xc3\x83\xb5\xaf\x9a\xb0\xc6\xd6\x69\x99\x32\x49\xec\x25\xb2\xb8\xe4\xfa\x90\x54\x13\x8e\xbf\x4a\x14\x12\x55\xe9\xb4\x25\xd9\x37\x2b\x32\xea\x9f\x3d\xf6\xac\x71\x74\xde\xcd\xa4\x0a\x02\x73\x01\xe9\x41\xc8\x08\x92\xa5\x32\x85\x60\xbd\xf2\x34\xd9\xf4\x4d\xdc\xb0\xa1\xf6\x4a\x95\x01\x2b\x95\xeb\xf5\x17\x99\x7d\x11\xe1\x0f\xa2\xbb\xce\xf3\xb3\xbb\xd9\x38\x3d\x2b\xc6\x15\x5c\xc4\x84\xdb\x47\x00\x59\xea\x9e\xad\x62\x28\xb8\x12\x8c\xb8\x94\xcf\x45\xd7\xb9\xbb\x9f\x7c\xb2\x10\x32\x0c\x45\x38\xee\x3a\x0b\xc2\x98\xb0\x5c\x9b\xda\x2c\x21\x13\x8a\xb4\x9f\xe6\xe6\xe3\xdd\x97\x49\x63\x1e\x93\x4f\xc2\xd8\x81\x09\x22\xa2\x14\x7a\x3a\x3a\x45\x5e\xe8\x7f\x7e\xb9\xfb\xe4\xc6\xe6\x9a\x69\x22\x5c\x63\xb5\x27\xb2\xca\x00\x82\x6c\x8c\xab\xab\xa3\xd6\x8a\xc8\xb7\xd9\x2c\x62\x2e\xc9\xcf\x6c\xcb\xdb\x0d\x2b\x0a\xc8\x06\xfb\x1e\xa1\xf3\xe1\x65\xbd\x82\x0d\x35\x2c\xc2\x24\x22\x5c\xbb\x4f\x44\x4f\x18\x31\x8f\xd7\xeb\x0f\xb8\xeb\xe4\x58\xdf\xcd\x60\xa7\x57\x0d\x44\x2e\xe5\x9c\xc8\x3f\xbe\xde\x7e\x84\xc0\xa6\x5e\xc7\x9e\x1d\xc3\x8e\x28\xdf\xc1\x9d\xd5\x70\x33\xde\x45\x98\xa5\xe7\x41\x44\x94\xe6\x88\x7b\x60\x72\x5f\x1b\x18\x82\xf8\x61\x9c\xc2\xd9\x02\xa8\x50\xcf\xac\x52\x03\xcb\x5a\xcb\x36\x8c\x28\xdf\x07\x52\xea\x33\x6f\x09\x83\xd2\xc3\x30\xb9\xaf\xad\x3e\x07\x71\x0a\xe7\xfe\x76\x21\x52\x0a\x79\xac\x59\x62\x49\xb9\xee\x3a\x93\xcf\x9f\xef\x3e\x7b\xe0\xc0\xaf\xb0\xdb\x2c\x39\xe4\xe6\xb2\xb8\xb6\x96\x57\x55\x7f\x50\xbc\xd8\xf9\xe6\x52\x9d\x5f\x65\x31\x5d\x02\xc5\x81\x93\xed\x87\xe6\xfd\x0c\xd3\x65\xc3\x95\xdd\xc4\xbf\x2b\x8d\xb4\xca\x5f\xfe\x00\xfc\xed\xf5\x3c\x64\x48\xa9\xc0\x29\xef\xeb\xa5\xdf\x44\xc8\xc2\x6d\x5e\x8b\x2c\x8f\xf1\xe1\xab\xec\x0a\x06\xfe\x40\xe3\x86\x27\x9b\xb3\xd6\x5c\x57\xfb\xc2\xae\xcc\x95\x66\xdb\xe0\x2f\xa2\x64\x0b\xd2\x44\xf1\x07\x5a\xee\xa5\x2b\x30\xde\x65\x7b\x4b\xf9\x71\xc6\x65\xcb\x1e\x60\x6b\x00\x5e\x66\x5c\x56\x73\x6b\xb6\xfb\xc5\xbd\x45\xe9\x0b\x74\x8b\xfd\xe0\x6a\x3f\x5b\x94\xd2\x28\x89\xda\x30\x2e\x1a\xe7\xbf\xe9\xfb\x7e\x49\xa4\x39\x2b\x8e\x93\x2e\x77\x9f\x03\x22\x17\x28\x2d\x68\x97\x8d\x7a\x8c\xb7\x3f\xc8\xca\x3a\x6f\x88\xa2\x37\xfc\xc1\xb6\x81\xfc\xc1\xf6\x7f\x26\xff\x06\x00\x00\xff\xff\xf6\xcb\x7b\xbc\x3b\x11\x00\x00")

func assetsHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtml,
		"assets/home.html",
	)
}

func assetsHomeHtml() (*asset, error) {
	bytes, err := assetsHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/home.html", size: 4411, mode: os.FileMode(436), modTime: time.Unix(1578544721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/home.html": assetsHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{assetsHomeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
