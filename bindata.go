// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/home.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x61\x6f\xdb\x36\x10\xfd\x9e\x5f\x71\x50\x30\xd8\xc6\x1c\xd9\x6e\xb6\xa0\x50\xa4\x00\x6d\x62\x63\x1d\xda\xa6\x68\x3b\xec\x43\x60\x14\xb4\x78\x8e\xb9\x52\xa4\x4a\xd2\xb6\xbc\xc0\xff\x7d\xa0\x2c\xc9\x94\x62\x3b\x2a\xd6\x22\xb0\xc4\xbb\x7b\xf7\xf8\x78\x47\x52\xe1\xc2\x24\xfc\xe6\x0c\x20\x5c\x20\xa1\xf6\x01\x20\x4c\xd0\x10\x88\x17\x44\x69\x34\x91\xb7\x34\xf3\x8b\xd7\x5e\x61\xd2\xb1\x62\xa9\x01\xad\xe2\xc8\x5b\x18\x93\xea\x60\x30\x88\xa9\xf0\x53\x2e\x8d\xcf\x37\x03\xfb\xcb\x37\x17\x9c\x18\xd4\xc6\x4f\x98\xf0\xff\xd1\xde\x4d\x38\xd8\xc5\x95\x20\x66\xc3\x71\xf7\x0c\xfe\xbf\x4b\x76\x61\xc8\x8c\x23\x3c\xed\x46\x00\xd6\x8c\x9a\x45\x00\xa3\xe1\xf0\x97\xeb\x72\x6c\x26\x15\x45\x15\x80\x96\x9c\x51\x18\xa5\x19\x9c\xdf\xdd\x8d\xc7\xe3\x71\xc3\xe3\x22\x96\x9c\x93\x54\x63\x00\xe5\x53\xd3\x43\xa7\x24\x66\xe2\x31\x80\x61\x65\x99\x4b\x61\x02\x10\x52\x25\x84\xc3\xe8\x32\xcd\xe0\x8d\x62\x84\xf7\x41\x13\xa1\x2f\x34\x2a\x36\x2f\x7c\xb7\xcf\x68\xfb\xb8\x42\xb1\x27\x3f\x23\xf1\xf7\x47\x25\x97\x82\x5a\x2a\x52\x05\x70\x7e\x7b\x65\xff\x1f\x07\x90\x94\x9e\x8c\x9f\xe4\xff\x8e\xc6\x1b\xbb\x74\x60\x16\x27\x31\xee\xee\xc6\x93\xf1\xe4\x27\xe4\x2c\x03\x2f\x2f\xaf\xde\x5e\xbd\xad\x86\x53\x42\x69\x2e\xde\x68\x98\x66\xd5\xa8\xc1\xcc\x5c\x10\xce\x1e\x45\x00\x1c\xe7\xa6\x6e\xd0\x0b\x42\xe5\x3a\xc8\xd3\x94\x7f\xe7\xf3\xf9\x71\x49\xcd\x4c\xd2\x0d\x18\x57\x95\x9f\xe0\x7b\xd9\x86\x6c\x2b\x4e\xe1\xc0\x29\xd5\xd0\xad\x61\x58\x11\x05\xf1\x52\x29\x14\xe6\x2b\x26\xe9\xf5\xb3\xd1\x89\xc2\x1f\xd7\x67\x67\x45\x41\x0b\x2a\xd7\xbe\x14\x5c\x12\x0a\x11\xcc\x97\x22\x36\x4c\x8a\x6e\x6f\x3f\x43\x1b\x6a\x58\x82\x10\x81\xc0\x35\xdc\x11\x83\xdd\x5e\x09\x50\x20\xa7\x4b\x9b\x0b\xa2\x7d\x14\x40\x16\xc0\xc3\xb4\xbf\x7f\xdf\x34\xde\x13\x49\x31\x80\x0e\x67\x02\x75\xc7\x19\x17\x24\xc1\x00\xbc\xdb\x4f\x7f\x81\x05\xf5\x1c\x93\xf5\x0d\xdc\x1c\x95\xba\x9d\xf3\xd7\xc3\xdb\x37\x93\x2b\x17\x08\x40\x2f\x48\x6a\x73\xe8\xd4\x46\x76\xf6\xa6\xed\x59\xf5\xd0\x98\x87\x55\xe7\xe7\xe6\x91\x91\x8c\xe9\x00\x3a\xd9\x2b\x37\xf9\xa6\x18\xdd\xd4\x46\x5b\xcc\x79\xa2\x70\x89\x22\xde\x1c\x98\x77\x35\xd7\xbb\xc9\xef\x57\x93\x51\x67\x3f\x8b\xfa\x72\x70\xb2\x91\x4b\xd3\x98\xc5\x8e\x4f\x4d\x3b\xb3\xc9\xd5\xa1\xc4\x60\x5d\x37\x2a\x13\xc2\x44\x00\x0f\xc3\x3e\x8c\xa6\x0d\x49\xe5\xda\xb0\xf8\x3b\x27\x33\xe4\x3a\x80\x39\xe1\x1a\x1d\x61\x9f\x4b\xf0\xb4\x47\xf3\xaf\xfa\xa3\xe9\xb6\xa9\xdd\xab\xb6\xb4\x88\x88\x17\xb9\x00\x75\x51\x9b\x7c\x4f\xb0\x69\xa6\xaa\x10\xb3\x13\x88\x43\xff\x37\x87\x74\xbd\x62\x28\x31\x04\x22\x78\x28\x3a\xa0\x5f\x54\xd0\x74\xbf\x20\x9f\xf2\x83\x27\x3f\x87\xba\x9d\x47\x45\xd2\x45\xa7\x9f\x87\xf5\x8b\x75\x6a\xf6\x92\xb0\x2b\x37\xac\x0f\x32\x61\x50\xad\x08\x87\x08\x34\x9a\x77\xc5\x5b\xb7\xd6\xae\x7b\xfa\x2f\x74\xec\xce\x61\x99\x5a\x81\xeb\x45\xb2\x2b\xf6\x07\x1b\x3b\xed\xc3\xee\xb7\xbe\xfc\xb6\xf8\x1f\x9c\xed\xc5\xba\x39\xfb\xca\xd4\x15\xdf\x49\x58\x88\x80\x99\x41\x41\xbf\x2a\x12\xa3\xde\x8b\xb1\x63\xd2\xb7\x5a\x8f\xa6\x3d\x27\x8a\xcd\xbb\xb9\x1a\x51\x64\x8f\xdc\x1e\xc4\x1c\x89\xaa\x26\x5f\x6a\xd2\xab\xf6\xcf\x6d\xdf\xfa\x0d\x1b\x82\xae\x75\xe5\xb0\xd6\x85\x24\x7f\xe3\xec\x8b\x8c\xbf\xa3\xe9\x7a\x4f\x4f\xfe\x76\xeb\xf5\x1c\x1f\x5f\x0a\x99\xa2\x70\xb7\x43\x5c\x99\x9e\x2b\x54\x2c\x85\x96\x1c\x7d\x26\xe6\xb2\xeb\xdd\x7f\x1a\x7f\x74\x10\x72\x0c\x8d\x82\x76\xbd\x05\x72\x2e\x1d\xd3\xb6\x96\x25\xe6\x52\x63\xfb\x34\xb7\xef\xef\xbf\x8c\x1b\x79\xec\x7c\x96\x9c\x1f\x49\x90\xa0\xd6\xe4\xf1\x64\x8a\xa2\x80\xff\xfc\x72\xff\xd1\x4f\xed\xc5\xca\x7a\xf8\x76\xd4\x4d\xe4\xac\x38\x44\x79\x8c\x6f\xf6\x87\x8b\xe3\x51\x6c\x9f\xb9\xc7\x5c\xe1\x8f\x7c\x2b\xbb\xae\x57\x9e\xcd\x47\x65\xbc\x4c\x50\x18\xff\x11\xcd\x98\xa3\x7d\x7c\xbb\x79\x47\xbb\x5e\x81\xf3\xcd\xc2\x7b\xbd\x7d\x20\xf1\x99\x10\xa8\xfe\xf8\xfa\xe1\x3d\x44\x2e\x9f\x3a\xf6\xec\x14\x76\xc2\xc4\x33\xdc\x59\x0d\x37\xe7\x5d\xba\x39\x22\x1d\x45\x24\x59\x81\x78\x00\xa6\xb0\xb5\x81\x41\x22\x8e\xe3\x94\xc6\x16\x40\xa5\x7a\x56\xfa\x06\x96\xb3\x40\x6d\x18\x31\x71\x08\xa4\xd2\x67\xde\x12\x86\x64\xc7\x61\x0a\x5b\x5b\x7d\x8e\xe2\x94\xc6\xc3\x3d\x80\x4a\x49\x75\xaa\x03\x52\xc5\x84\xe9\x7a\xe3\xcf\x9f\xef\x3f\x07\xe0\xc1\xaf\xf0\xbc\x03\x0a\xc8\xed\x75\x79\xfb\xaa\x6e\x5c\xe1\xa0\xfc\x3e\x09\xed\xdd\xb0\xb8\x91\x51\xb6\x02\x46\x23\x2f\xdf\xe2\xec\x67\x06\x65\xab\x86\x29\xbf\x50\x7e\xd3\x86\x18\x5d\x7c\xc3\x00\x84\xbb\x5b\x66\xcc\x89\xd6\x91\x57\x5d\x3b\x2b\xbb\xf5\x50\xa5\xd9\xde\xee\x1d\x8b\xb5\xd1\x9b\xfc\xca\x04\xe1\xc0\xd0\x86\x25\xcf\x59\x6b\xae\x9b\x43\x6e\x37\xf6\xfe\xb1\xeb\xda\x17\x51\xf2\x05\x69\xa2\x84\x03\xa3\x0e\xd2\x95\x94\x3e\x67\xfb\x81\x89\xd3\x8c\xab\x96\x3d\xc2\xd6\x02\xbc\xcc\xb8\xaa\xe6\xd6\x6c\x0f\x8b\xfb\x81\x64\x2f\xd0\x2d\xf7\x83\x9b\xc3\x6c\x49\xc6\x92\x65\xd2\x86\x71\xd9\x38\xff\x4f\xdf\x37\x2b\x54\xf6\x00\x38\x4d\xba\xda\x7d\x8e\x88\x5c\xa2\xb4\xa0\x5d\x35\xea\x29\xde\xe1\x20\x2f\xeb\xa2\x21\xca\xde\x08\x07\xbb\x06\x0a\x07\xbb\x4f\xff\xff\x02\x00\x00\xff\xff\x3d\x4f\x14\xd9\x02\x10\x00\x00")

func assetsHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHomeHtml,
		"assets/home.html",
	)
}

func assetsHomeHtml() (*asset, error) {
	bytes, err := assetsHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/home.html", size: 4098, mode: os.FileMode(436), modTime: time.Unix(1576426743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/home.html": assetsHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{assetsHomeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
